---
description: 
globs: 
alwaysApply: false
---
# Amaterasu Scratch-Off & Raffle Project Guidelines

## Critical Rules

- **Platform & Language:** All smart contracts MUST be written in Move v2 for the Aptos mainnet.
- **On-Chain Randomness:** Game outcomes MUST be determined exclusively by `aptos_framework::randomness`. Do NOT use off-chain or predictable sources.
- **Atomic Fund Splits:** All `purchase()` transactions MUST atomically split funds to the five designated pools (Card-Reward, Protocol, Giveaway, Referral, Jackpot) using the 70/15/5/5/5 ratio.
- **NFT Representation:** Each scratch card MUST be represented as a unique `ScratchCard` NFT (Object model).
- **Pool Solvency:** The system MUST include a borrow-and-reimburse mechanism from a `treasury_reserve` to cover prize payouts exceeding the `card_reward_pool` balance.
- **Security First:** Defend against common exploits. Prevent undergasing attacks in `reveal()` and ensure no re-entrancy vulnerabilities.
- **Frictionless UX:** Prioritize a smooth user flow. Implement features like `play_again()` using pre-authorized session keys to minimize repeated signature requests.
- **Admin Functions:** All administrative functions (e.g., `draw_grand_giveaway`, `set_param`) MUST be protected by a capability check.

## Examples

<example>
  ```move
  // VALID: Correctly splitting funds atomically using the idiomatic coin::split function.
  // This ensures accuracy and safety.
  public entry fun purchase(
      buyer: &signer,
      // ...
  ) {
      // ...
      let payment = coin::withdraw<APT>(buyer, total_cost);
      let game_state = borrow_global_mut<GameState>(@game_addr);

      // Atomically split funds from the source `payment` coin
      let to_protocol = coin::split(&mut payment, (total_cost * 15) / 100);
      coin::merge(&mut game_state.protocol_fee_pool, to_protocol);

      let to_jackpot = coin::split(&mut payment, (total_cost * 5) / 100);
      coin::merge(&mut game_state.jackpot_pool, to_jackpot);

      // ... other splits ...

      // The remainder of the payment coin goes to the card reward pool
      coin::merge(&mut game_state.card_reward_pool, payment);
  }
  ```
</example>

<example type="invalid">
  ```move
  // INVALID: Using sequential transfers instead of splitting. 
  // This is prone to rounding errors, is less gas-efficient, and does not guarantee atomicity
  // in the same way as `coin::split`.
  public entry fun purchase(
      buyer: &signer,
      // ...
  ) {
      // ...
      let protocol_cut = (total_cost * 15) / 100;
      let jackpot_cut = (total_cost * 5) / 100;
      
      // THIS IS WRONG. Do not transfer funds sequentially like this.
      aptos_framework::aptos_coin::transfer(buyer, @protocol_addr, protocol_cut);
      aptos_framework::aptos_coin::transfer(buyer, @jackpot_addr, jackpot_cut);
      // ...
  }
  ```
</example>
